#!/usr/bin/env python3
import os
import psycopg2
import psycopg2.extras

import pandas as pd
import matplotlib.pyplot as plt

#    cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
#        cursor.execute(sql)
#        records = cursor.fetchall()
#        pprint.pprint(records)

server='rising'
server_label = server
col='clients'

script='nobranch';
sql="""
SELECT
  test_metrics_data.server,
  script,
  scale,clients,
  round(tps) AS tps,
  metric,
  date_trunc('minute',collected) AS collected,
  min(value) AS min,
  CASE 
    WHEN avg(value) > 100 THEN round(avg(value))
    WHEN avg(value) > 10 THEN round(avg(value)::NUMERIC,1)
    WHEN avg(value) > 1 THEN round(avg(value)::NUMERIC,2)
    ELSE round(avg(value)::NUMERIC,3)
  END AS avg,
  max(value) AS max 
FROM test_metrics_data,tests
WHERE 
  test_metrics_data.server=tests.server AND
  test_metrics_data.test=tests.test AND
  script='%s' AND
  test_metrics_data.test=3833 AND
  test_metrics_data.server='rising' AND
  metric IN ('rate','avg_latency','min_latency','max_latency','id','wa','Dirty','nvme0n1_%%util','nvme0n1_rMB/s','nvme0n1_wMB/s')
GROUP BY test_metrics_data.server,script,scale,clients,tps,metric,date_trunc('minute',collected)
ORDER BY test_metrics_data.server,script,scale,clients,tps,metric,date_trunc('minute',collected)
;""" % (script)

def main():
    conn_string = "host='localhost' dbname='results' user='gsmith' password='secret'"
    print("Connecting to database\n	->%s" % (conn_string))
    conn = psycopg2.connect(conn_string)

    try:
        print(sql)
        df = pd.read_sql_query(sql, conn)
        return df
    finally:
        conn.close()

if __name__ == "__main__":
    # TODO Create this directory if it doesn't exist
    base="images"
    df=main()
    df.set_index(col, inplace=True)
    g=df.groupby('metric')
    print(g)

    # Disable the warning generated by the rename    
    pd.options.mode.chained_assignment = None  # default='warn'

    fig=plt.figure();
    ax=fig.add_subplot(1,1,1)
    
    for k,v in g:
        print("Processing",k)
        v.rename(columns={'tps':k},inplace=True)
        print(v)
        # TODO title needs to be server_label on first SQL, then script on second/third
        ax=v.plot(grid=True,title=script,figsize=(8,6),ax=ax)
        ax.set_ylabel('TPS')
        ax.xaxis.grid(True, which="minor")

        # Overwrite this for now to get all 3 saved to one file
        k=server
        
        unslashed=k.replace("/","-")
        fn=os.path.join(base,unslashed)

#        plt.savefig(fn,dpi=80)  # gives 640x480 figures
#        plt.close()
        print("saved to '%s.png'" % fn)
    ax.legend()
    plt.show()
