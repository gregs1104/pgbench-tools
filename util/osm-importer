#!/bin/bash -x
# TODO import ./CONFIG test database information passed so this works on the cloud.
# Not sure what challenges that has yet, for what osm2pgsql needs to run remotely.
#
# To avoid vacuum of giant GIS database, easiest for now to do
# "dropdb gis; createdb gis" before running benchwarmer.  Then this script
# puts all the extensions back.  We can't just drop/create here because
# basic pgbench-tools work requires the database exist for starting
# snapshots of stats.

. ../../../config
. ../../../params

SERVER="localhost"

psql -h $SERVER -d gis -c 'CREATE EXTENSION postgis;'
psql -h $SERVER -d gis -c 'CREATE EXTENSION hstore;'
psql -h $SERVER -d gis -c 'CREATE EXTENSION pg_stat_statements;'
psql -h $SERVER -d gis -c 'CREATE EXTENSION pg_buffercache;'

if [ -z "${OSMNODECACHE}" ] ; then
  OSMNODECACHE=0
fi

# TODO SETCLIENTS is a list, assigning it to a single variable is risky.
# Only the benchwarmer script knows the singular client count for a test.
# However, it turns that into "-c 2" pgbench form before calling this script.
# Here we would need an alternate communication or handling a full set of
# command line parameters to find the number; thus the kludge.
if [ -z "${SETCLIENTS}" ] ; then
  SETCLIENTS=2
fi

rm -f nodes.db 
# When changing this, beware the usual style of commenting out any one line.
# That doesn't work on this form of multi-line command.
time osm2pgsql --create --slim -v -d gis \
    --cache ${OSMNODECACHE} --number-processes ${SETCLIENTS} \
    --flat-nodes nodes.db \
    --middle-way-node-index-id-shift=${MULTI} \
    --hstore --hstore-add-index \
    ~/osm/planet-latest.osm.pbf
rm -f nodes.db
